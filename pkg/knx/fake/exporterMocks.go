// Copyright Â© 2022-2025 Christian Fritz <mail@chr-fritz.de>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: exporter.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricsExporter is a mock of MetricsExporter interface.
type MockMetricsExporter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsExporterMockRecorder
}

// MockMetricsExporterMockRecorder is the mock recorder for MockMetricsExporter.
type MockMetricsExporterMockRecorder struct {
	mock *MockMetricsExporter
}

// NewMockMetricsExporter creates a new mock instance.
func NewMockMetricsExporter(ctrl *gomock.Controller) *MockMetricsExporter {
	mock := &MockMetricsExporter{ctrl: ctrl}
	mock.recorder = &MockMetricsExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsExporter) EXPECT() *MockMetricsExporterMockRecorder {
	return m.recorder
}

// IsAlive mocks base method.
func (m *MockMetricsExporter) IsAlive() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlive")
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAlive indicates an expected call of IsAlive.
func (mr *MockMetricsExporterMockRecorder) IsAlive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockMetricsExporter)(nil).IsAlive))
}

// Run mocks base method.
func (m *MockMetricsExporter) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockMetricsExporterMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMetricsExporter)(nil).Run), ctx)
}
