// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

// Package knx is a generated GoMock package.
package knx

import (
	gomock "github.com/golang/mock/gomock"
	knx "github.com/vapourismo/knx-go/knx"
	reflect "reflect"
)

// MockGroupClient is a mock of GroupClient interface
type MockGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockGroupClientMockRecorder
}

// MockGroupClientMockRecorder is the mock recorder for MockGroupClient
type MockGroupClientMockRecorder struct {
	mock *MockGroupClient
}

// NewMockGroupClient creates a new mock instance
func NewMockGroupClient(ctrl *gomock.Controller) *MockGroupClient {
	mock := &MockGroupClient{ctrl: ctrl}
	mock.recorder = &MockGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupClient) EXPECT() *MockGroupClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockGroupClient) Send(event knx.GroupEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockGroupClientMockRecorder) Send(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGroupClient)(nil).Send), event)
}

// Inbound mocks base method
func (m *MockGroupClient) Inbound() <-chan knx.GroupEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inbound")
	ret0, _ := ret[0].(<-chan knx.GroupEvent)
	return ret0
}

// Inbound indicates an expected call of Inbound
func (mr *MockGroupClientMockRecorder) Inbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inbound", reflect.TypeOf((*MockGroupClient)(nil).Inbound))
}

// Close mocks base method
func (m *MockGroupClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockGroupClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGroupClient)(nil).Close))
}

// MockDPT is a mock of DPT interface
type MockDPT struct {
	ctrl     *gomock.Controller
	recorder *MockDPTMockRecorder
}

// MockDPTMockRecorder is the mock recorder for MockDPT
type MockDPTMockRecorder struct {
	mock *MockDPT
}

// NewMockDPT creates a new mock instance
func NewMockDPT(ctrl *gomock.Controller) *MockDPT {
	mock := &MockDPT{ctrl: ctrl}
	mock.recorder = &MockDPTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDPT) EXPECT() *MockDPTMockRecorder {
	return m.recorder
}

// Pack mocks base method
func (m *MockDPT) Pack() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pack")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Pack indicates an expected call of Pack
func (mr *MockDPTMockRecorder) Pack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pack", reflect.TypeOf((*MockDPT)(nil).Pack))
}

// Unpack mocks base method
func (m *MockDPT) Unpack(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpack", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpack indicates an expected call of Unpack
func (mr *MockDPTMockRecorder) Unpack(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpack", reflect.TypeOf((*MockDPT)(nil).Unpack), data)
}

// Unit mocks base method
func (m *MockDPT) Unit() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit")
	ret0, _ := ret[0].(string)
	return ret0
}

// Unit indicates an expected call of Unit
func (mr *MockDPTMockRecorder) Unit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockDPT)(nil).Unit))
}

// String mocks base method
func (m *MockDPT) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockDPTMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDPT)(nil).String))
}
